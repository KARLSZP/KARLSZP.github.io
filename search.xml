<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>leetcode-day-1</title>
    <url>/2020/04/04/leetcode-day-1/</url>
    <content><![CDATA[<h1 id="LeetCode-30-days-Challenge-Day-1"><a href="#LeetCode-30-days-Challenge-Day-1" class="headerlink" title="LeetCode 30 days Challenge - Day 1"></a>LeetCode 30 days Challenge - Day 1</h1><p>本系列将对LeetCode新推出的30天算法挑战进行总结记录，旨在记录学习成果、方便未来查阅，同时望为广大网友提供帮助。</p>
<hr>
<h2 id="Single-Number"><a href="#Single-Number" class="headerlink" title="Single Number"></a>Single Number</h2><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p>
<p><strong>Note:</strong></p>
<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>题目要求分析：给定非空数组，找到单独出现的元素。</p>
<ul>
<li><p>时间复杂度：O(n)</p>
</li>
<li><p>空间复杂度：O(1)</p>
</li>
</ul>
<p>解法：</p>
<p>关键利用异或运算符<code>^</code>，对于异或运算：</p>
<ul>
<li>a ^ a == 0</li>
<li>a ^ 0 == a</li>
<li>a ^ b ^ c = a ^ c ^ b</li>
</ul>
<p>结合题目给出除了目标元素外，其余元素各出现两次，不难想到遍历整个数组，逐个将元素进行异或运算，最后剩下的元素即为目标。</p>
<hr>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) res ^= n;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>传送门：<a href="https://leetcode.com/explore/other/card/30-day-leetcoding-challenge/528/week-1/3283/" target="_blank" rel="noopener">Single Number</a></p>
<p>Karl</p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-day-2</title>
    <url>/2020/04/04/leetcode-day-2/</url>
    <content><![CDATA[<h1 id="LeetCode-30-days-Challenge-Day-2"><a href="#LeetCode-30-days-Challenge-Day-2" class="headerlink" title="LeetCode 30 days Challenge - Day 2"></a>LeetCode 30 days Challenge - Day 2</h1><p>本系列将对LeetCode新推出的30天算法挑战进行总结记录，旨在记录学习成果、方便未来查阅，同时望为广大网友提供帮助。</p>
<hr>
<h2 id="Happy-Number"><a href="#Happy-Number" class="headerlink" title="Happy Number"></a>Happy Number</h2><p>Write an algorithm to determine if a number is “happy”.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 19</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">1^2 + 9^2 &#x3D; 82</span><br><span class="line">8^2 + 2^2 &#x3D; 68</span><br><span class="line">6^2 + 8^2 &#x3D; 100</span><br><span class="line">1^2 + 0^2 + 0^2 &#x3D; 1</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>题目要求分析：给定一个整数，将该整数每一位平方加和得到新的整数，重复直到整数为1或出现循环。</p>
<p>解法：</p>
<p>快慢指针：遇到出现循环情况的题目，可以考虑快慢指针的方法：</p>
<ul>
<li>快指针：一次走2步（在本题中即进行两次运算）。</li>
<li>慢指针：一次走1步（进行一次运算）。</li>
</ul>
<p>在若干次迭代后，如果存在循环，快慢指针会指向同一值，此时退出循环即可。</p>
<hr>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_pow</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            tmp += (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> slow = n, fast = n;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            slow = get_pow(slow);</span><br><span class="line">            fast = get_pow(fast);</span><br><span class="line">            fast = get_pow(fast);</span><br><span class="line">        &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">        <span class="keyword">return</span> (slow == <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<p>传送门：<a href="https://leetcode.com/explore/other/card/30-day-leetcoding-challenge/528/week-1/3284/" target="_blank" rel="noopener">Happy Number</a></p>
<p>Karl</p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-day-3</title>
    <url>/2020/04/04/leetcode-day-3/</url>
    <content><![CDATA[<h1 id="LeetCode-30-days-Challenge-Day-3"><a href="#LeetCode-30-days-Challenge-Day-3" class="headerlink" title="LeetCode 30 days Challenge - Day 3"></a>LeetCode 30 days Challenge - Day 3</h1><p>本系列将对LeetCode新推出的30天算法挑战进行总结记录，旨在记录学习成果、方便未来查阅，同时望为广大网友提供帮助。</p>
<hr>
<h2 id="Maximum-Subarray"><a href="#Maximum-Subarray" class="headerlink" title="Maximum Subarray"></a>Maximum Subarray</h2><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum &#x3D; 6.</span><br></pre></td></tr></table></figure>

<p><strong>Follow up:</strong></p>
<p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
<hr>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>题目要求分析：给定一个整型数组，找到其中连续和最大的子数组。</p>
<blockquote>
<p>本题是算法导论原题，可以参考原书，以加深理解。</p>
</blockquote>
<p>解法一（遍历，追踪最大值）：</p>
<p>维护一个遍历res为最终答案，cur记录当前已经积累的值，当cur &lt; 0时，重置cur为0。</p>
<p>初次接触者可能有两个问题：</p>
<ol>
<li><p>为什么cur小于0才重置，而不是cur变小了就重置？</p>
<p>cur变小说明加了一个负数，但“迄今为止”，我们所累加的仍是一个正值。</p>
</li>
<li><p>能保证完备性吗？</p>
<p>能。每次cur的更新意味着一个子数组的结束。不妨考虑：</p>
<p>最坏情况：全是负数的数组，每遍历一个值便更新一次cur，res成功track最大的负数。</p>
<p>最佳情况：全数组非负，直到结束不会更新cur，res成功track整个数组的和和。</p>
<p>其他情况：尽可能地以正数为子数组的第一个元素，遇到负数进行“容忍”，直到该子数组和为负，res成功track所有子数组和中最大的一个。</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>, res = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">        cur += i;</span><br><span class="line">        res = max(cur, res);</span><br><span class="line">        <span class="keyword">if</span> (cur &lt; <span class="number">0</span>) cur = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>解法二（分治法）：</p>
<p>这个方法是《算法导论》中介绍的，对每一个数组：</p>
<ol>
<li>取中点，分成左右两份，数组的最大子数组和可能包括或者不包括中点。</li>
<li>考虑以下情况：<ol>
<li>不包括中点，在左边一份：递归地，对左边一份进行求解。</li>
<li>不包括中点，在右边一份：递归地，对左边一份进行求解。</li>
<li>包括中点：中点加上左边一份的最大尾部和以及右边一份的最大头部和。</li>
</ol>
</li>
<li>计算上述三种情况，取最大即为所求。</li>
</ol>
<p>取题中示例：[-2,1,-3,4,-1,2,1,-5,4]</p>
<p>取中点 -1, 分为：[-2,1,-3,4],-1, [2,1,-5,4]</p>
<ol>
<li>对[-2,1,-3,4]进行求解</li>
<li>对 [2,1,-5,4]进行求解</li>
<li>包括-1，左边最大尾部和：4+(-3)+1 = 2，右边最大头部和：2+1 = 3</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 包括中点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">crossmid</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> l_res = INT_MIN, r_res = INT_MIN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 左边最大尾部和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i &gt;=l; i--) &#123;</span><br><span class="line">        cur += nums[i];</span><br><span class="line">        <span class="keyword">if</span> (cur &gt; l_res) l_res = cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cur = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 右边最大头部和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid+<span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        cur += nums[i];</span><br><span class="line">        <span class="keyword">if</span> (cur &gt; r_res) r_res = cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l_res + r_res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不包括中点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">side</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> nums[l];</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 求三者最大值</span></span><br><span class="line">    <span class="keyword">return</span> max(max(side(nums, l, mid), side(nums, mid + <span class="number">1</span>, r)),  crossmid(nums, l, mid, r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> side(nums, <span class="number">0</span>, nums.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>传送门：<a href="https://leetcode.com/explore/other/card/30-day-leetcoding-challenge/528/week-1/3285/" target="_blank" rel="noopener">Maximum Subarray</a></p>
<p>Karl</p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-day-4</title>
    <url>/2020/04/06/leetcode-day-4/</url>
    <content><![CDATA[<h1 id="LeetCode-30-days-Challenge-Day-4"><a href="#LeetCode-30-days-Challenge-Day-4" class="headerlink" title="LeetCode 30 days Challenge - Day 4"></a>LeetCode 30 days Challenge - Day 4</h1><p>本系列将对LeetCode新推出的30天算法挑战进行总结记录，旨在记录学习成果、方便未来查阅，同时望为广大网友提供帮助。</p>
<hr>
<h2 id="Move-Zeroes"><a href="#Move-Zeroes" class="headerlink" title="Move Zeroes"></a>Move Zeroes</h2><p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure>

<p><strong>Note</strong>:</p>
<ol>
<li>You must do this <strong>in-place</strong> without making a copy of the array.</li>
<li>Minimize the total number of operations.</li>
</ol>
<hr>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>题目要求分析：给定一个整型数组，将所有非0元素移到数组的前部，并保持相对顺序不变。</p>
<p>解法：</p>
<p>双指针：遇到对数组中元素进行原地操作(in-place)的时候，双指针往往是很好的方法。</p>
<p>本题可以设计两个指针：</p>
<ul>
<li>i：记录当前处理到的位置，若当前位置为非0元素，则交换移动到前部，是0则跳过。</li>
<li>j：记录下一个交换位置，从左到右增长，保证非0元素全部在数组的前部。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 注意 &amp;&amp; 是会提前截断的，若nums[i] == 0，j不会增长</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;nums.size(); i++) <span class="keyword">if</span> (nums[i] != <span class="number">0</span> &amp;&amp; i != ++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>传送门：<a href="https://leetcode.com/explore/other/card/30-day-leetcoding-challenge/528/week-1/3286/" target="_blank" rel="noopener">Move Zeroes</a></p>
<p>Karl</p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-day-5</title>
    <url>/2020/04/06/leetcode-day-5/</url>
    <content><![CDATA[<h1 id="LeetCode-30-days-Challenge-Day-5"><a href="#LeetCode-30-days-Challenge-Day-5" class="headerlink" title="LeetCode 30 days Challenge - Day 5"></a>LeetCode 30 days Challenge - Day 5</h1><p>本系列将对LeetCode新推出的30天算法挑战进行总结记录，旨在记录学习成果、方便未来查阅，同时望为广大网友提供帮助。</p>
<hr>
<h2 id="Best-Time-to-Buy-and-Sell-Stock-II"><a href="#Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="Best Time to Buy and Sell Stock II"></a>Best Time to Buy and Sell Stock II</h2><p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p>
<p><strong>Note:</strong> You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 3 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">             Then buy on day 4 (price &#x3D; 3) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-3 &#x3D; 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Buy on day 1 (price &#x3D; 1) and sell on day 5 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are</span><br><span class="line">             engaging multiple transactions at the same time. You must sell before buying again.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>题目要求分析：给定一个整型数组，记录着若干天股票的价格，进行任意次买入卖出（买入后必须先卖出再进行下一次买入），求最大利润。</p>
<p>解法：</p>
<p>本题是股票的买卖时机系列的第二题，问题关键在于理解：</p>
<ol>
<li><p>对于多日连续上升的情况，每日都进行一次买入卖出等价于最低日买入、最高日卖出；</p>
<p>在下图中，注意：A + B + C = D</p>
<p><img src="http://yanxuan.nosdn.127.net/70510710f7ef55f3a80d7fa901b23296.png" alt="img2.png"></p>
</li>
<li><p>对于两次连续的谷底、峰值情况，每次都进行买入、卖出会优于只进行一次买入、卖出；</p>
<p>在下图中，注意：A + B &gt; C</p>
<p><img src="http://yanxuan.nosdn.127.net/33235b8621329a12ddcf1acfd135fa3e.png" alt="img1.png"></p>
</li>
</ol>
<p>理解了以上两种情况，就能推导出最佳情况实际上就是逐日进行检查，当每日价格高于前一天时，就能盈利。</p>
<hr>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;prices.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &gt; prices[i<span class="number">-1</span>]) res += prices[i] - prices[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>传送门：<a href="https://leetcode.com/explore/other/card/30-day-leetcoding-challenge/528/week-1/3287/" target="_blank" rel="noopener">Best Time to Buy and Sell Stock II</a></p>
<p>Karl</p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-day-6</title>
    <url>/2020/04/06/leetcode-day-6/</url>
    <content><![CDATA[<h1 id="LeetCode-30-days-Challenge-Day-6"><a href="#LeetCode-30-days-Challenge-Day-6" class="headerlink" title="LeetCode 30 days Challenge - Day 6"></a>LeetCode 30 days Challenge - Day 6</h1><p>本系列将对LeetCode新推出的30天算法挑战进行总结记录，旨在记录学习成果、方便未来查阅，同时望为广大网友提供帮助。</p>
<hr>
<h2 id="Group-Anagrams"><a href="#Group-Anagrams" class="headerlink" title="Group Anagrams"></a>Group Anagrams</h2><p>Given an array of strings, group anagrams together.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li>All inputs will be in lowercase.</li>
<li>The order of your output does not matter.</li>
</ul>
<hr>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>题目要求分析：给定一个字符串数组，将其中由相同字母组成的字符串归类到一起。</p>
<p>解法：</p>
<p>为判断是否由相同字母组成，有两种方法：</p>
<ol>
<li>对每个字符串进行排序，排序后相同的即为同组。</li>
<li>对每个字符串统计字母出现的次数，次数相同的即为同组。</li>
</ol>
<p>本题如果调用<code>sort()</code>函数来实现第一个方法，复杂度则为<code>O(KlogK)</code>级别，但由于字母是有限且连续的，不妨考虑使用桶排序的方案，这样可以将复杂度降为<code>O(K)</code>（K为最长字符串长度）。</p>
<p>第二种方法复杂度同为<code>O(K)</code>，本文采用第一种方法。</p>
<p>在知道如何判断后，考虑如何进行归类，作者使用的是<code>unordered_map</code>哈希结构进行归类，即：</p>
<ol>
<li><p>建立一个由字符串到列表的映射：<code>unordered_map&lt;string, vector&lt;string&gt;&gt; m;</code></p>
</li>
<li><p>对题目给出的数组，遍历之，将每个字符串元素进行桶排序，并且将结果作为映射的键，将原字符串加入该键对应的列表中：<code>for (string s : strs) m[BucketSort(s)].push_back(s);</code></p>
</li>
<li><p>遍历m，将结果加入res即可：<code>for (auto &amp;v : m) res.push_back(v.second);</code></p>
<p>（此处操作可以参考“对unordered_map进行遍历”）</p>
</li>
</ol>
<hr>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 桶排序</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BucketSort</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">bucket</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : s) bucket[c - <span class="string">'a'</span>]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;bucket.size(); i++) <span class="keyword">while</span>(bucket[i]--) &#123;</span><br><span class="line">        res += <span class="string">'a'</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; <span class="title">groupAnagrams</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; res;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> s : strs) m[BucketSort(s)].push_back(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : m) res.push_back(v.second);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>传送门：<a href="https://leetcode.com/explore/other/card/30-day-leetcoding-challenge/528/week-1/3288/" target="_blank" rel="noopener">Group Anagrams</a></p>
<p>Karl</p>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
</search>
